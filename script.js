const CONTRACT_CONFIG = { feeRecipient: 'bc1qyetzzylgkyq6rcqx4uu9jyrhzs0ume44t9rfrw', feeAmount: 0.0001, unlockBlockHeight: 263527, network: 'signet', inscriptionPostage: 10000 };
let walletConnected = false, currentWallet = null, userAddress = null, userPublicKey = null, currentNetwork = { network: 'unknown' }, networkStatusInterval = null, countdownInterval = null, carouselAutoSlideInterval = null;

const TWEET_TEMPLATES = [ { img: "twitter-x.png", text: "🔒 My thoughts, sealed in a #Bitcoin Time Capsule on Signet! Unlocks at block {UNLOCK_BLOCK}. Early birds get rewards! #BTC #CryptoFuture" }, { img: "twitter-xi.png", text: "Sending a message to the future via #Bitcoin! ⏳ My Time Capsule on Signet unlocks at block {UNLOCK_BLOCK}. Be there! #TimeCapsule #Blockchain" }, { img: "twitter-xiii.png", text: "Got a secret for block {UNLOCK_BLOCK}? 🤫 Stored mine in the #Bitcoin Time Capsule (Signet). Unlockers earn! #CryptoNews #FutureTech" }, { img: "twitter-xiiii.png", text: "Exploring the #Bitcoin Time Capsule on Signet! 🛠️ Message locked until block {UNLOCK_BLOCK}. Secure, decentralized, rewarding. #BTCdev #Web3" } ];
const APP_URL = "https://internetmoneylabs.github.io/TimeCapsuleContract";

function showModal(title, bodyHtml, isWalletModal = false) {
    const modalOverlay = isWalletModal ? document.getElementById('walletSelectionModal') : document.getElementById('modalOverlay');
    if (!modalOverlay) return; const modalTitle = modalOverlay.querySelector('.modal-title'); const modalBody = modalOverlay.querySelector('.modal-body'); const modalClose = modalOverlay.querySelector('.modal-close'); const modalOk = modalOverlay.querySelector('.modal-footer .btn-primary');
    if (modalTitle) modalTitle.textContent = title; if (modalBody && !isWalletModal && bodyHtml !== undefined) modalBody.innerHTML = bodyHtml;
    modalOverlay.classList.add('active');
    const closeModal = () => { modalOverlay.classList.remove('active'); const el = modalOverlay.querySelector('.modal'); if (el) { el.style.opacity = '0'; el.style.transform = 'translateY(-50px)'; }};
    if (modalClose) modalClose.onclick = closeModal; if (modalOk && !isWalletModal) modalOk.onclick = closeModal;
    modalOverlay.onclick = (e) => { if (e.target === modalOverlay) closeModal(); };
    setTimeout(() => { const el = modalOverlay.querySelector('.modal'); if (el) { el.style.opacity = '1'; el.style.transform = 'translateY(0)';}}, 10);
}
function hideModal(isWalletModal = false) { const modalOverlay = isWalletModal ? document.getElementById('walletSelectionModal') : document.getElementById('modalOverlay'); if (modalOverlay) { const el = modalOverlay.querySelector('.modal'); if (el) { el.style.opacity = '0'; el.style.transform = 'translateY(-50px)';} setTimeout(() => { modalOverlay.classList.remove('active'); }, 300);}}
function shortenAddress(address, chars = 6) { if (!address || typeof address !== 'string') return ''; return `${address.substring(0, chars + 2)}...${address.substring(address.length - chars)}`; }
async function fetchSignetBalance(address) {
    if (!address) return 'N/A';
    try {
        const response = await fetch(`https://mempool.space/signet/api/address/${address}`);
        if (!response.ok) { console.warn(`Balance API err for ${address}: ${response.status}`); return 'Error'; }
        const data = await response.json(); const balanceSat = (data.chain_stats.funded_txo_sum - data.chain_stats.spent_txo_sum) + (data.mempool_stats.funded_txo_sum - data.mempool_stats.spent_txo_sum);
        return `${(balanceSat / 100000000).toFixed(4)} tBTC`;
    } catch (error) { console.error(`Fetch balance fail for ${address}:`, error); return 'N/A (API)'; }
}
function updateWalletDisplay(walletName, address, network, balanceStr = 'Loading...') {
    const wsEl = document.getElementById('walletStatus'), wiEl = document.getElementById('walletInfo'), waEl = document.getElementById('walletAddress'), wbEl = document.getElementById('walletBalance'), connBtn = document.getElementById('connectWallet'), discBtn = document.getElementById('disconnectWallet');
    if (walletConnected && address) { wsEl.style.display = 'none'; wiEl.style.display = 'flex'; waEl.textContent = `${walletName||'Wallet'}: ${shortenAddress(address)}`; wbEl.textContent = `Balance: ${balanceStr}`; connBtn.style.display = 'none'; discBtn.style.display = 'inline-flex';
    } else { wsEl.style.display = 'block'; wsEl.textContent = 'Wallet: Not Connected'; wiEl.style.display = 'none'; connBtn.style.display = 'inline-flex'; discBtn.style.display = 'none'; }
}    
async function initWalletConnection() {
    const connBtn = document.getElementById('connectWallet'), discBtn = document.getElementById('disconnectWallet'); await checkWalletsAvailability(); 
    connBtn.onclick = () => {
        showModal('Select Bitcoin Wallet', '', true);
        document.querySelectorAll('#walletSelectionModal .wallet-option').forEach(btn => {
            btn.onclick = async () => {
                const type = btn.dataset.wallet; if (btn.classList.contains('unavailable')) { hideModal(true); showModal("Wallet Not Found", `<p>${type} wallet not detected.</p>`); return; }
                hideModal(true); try { await connectToWallet(type); } catch (err) { console.error(`Conn to ${type} fail:`, err); updateWalletDisplay(); walletConnected=false; currentWallet=null; showModal("Connection Error", `<p>Failed: ${err.message||'Unknown'}</p>`);}
                updateEncryptButtonState();
            };
        });
    };
    discBtn.onclick = async () => { const name = currentWallet?._brand?.name||"Wallet"; if(currentWallet&&typeof currentWallet.disconnect==='function'){try{await currentWallet.disconnect();}catch(e){console.warn(`Err on ${name}.disconnect: ${e.message}`);}} else if(currentWallet&¤tWallet._satsConnect&&typeof currentWallet._satsConnect.disconnect==='function'){try{await currentWallet._satsConnect.disconnect();}catch(e){console.warn(`Err on SatsConn.disconnect: ${e.message}`);}} handleDisconnect(name);};
    await checkInitialConnection();
    const tcppLnk=document.getElementById('tcppLink');if(tcppLnk)tcppLnk.onclick=(e)=>{e.preventDefault();hideModal(true);showModal("Terms & Privacy",`<div class="tcpp-content"><h3>Terms of Service</h3><p>This Bitcoin Time Capsule platform ("Service") is an experimental application operating on the Bitcoin Signet test network. By utilizing this Service, you acknowledge and agree to the following terms: The Service is provided "as-is" for demonstration and testing purposes only. All assets (Signet BTC) and messages managed through this Service have no real-world monetary value. We make no warranties regarding the reliability, security, or functionality of the Service. Users assume all risks associated with interacting with experimental blockchain applications.</p><h3>Privacy Policy</h3><p>We are committed to user privacy. This Service does not collect or store private keys. Wallet interactions are handled by your chosen third-party wallet provider, subject to their respective privacy policies. Publicly available blockchain data, such as transaction IDs and addresses involved in capsule creation, may be logged for operational and analytical purposes. This data is inherent to the public nature of the Bitcoin blockchain.</p></div>`);};
    const footerConn=document.getElementById('footerForceConnect');if(footerConn)footerConn.onclick=(e)=>{e.preventDefault();connBtn.click();};
}
const handleDisconnect=(name="Wallet")=>{walletConnected=false;userAddress=null;userPublicKey=null;currentWallet=null;currentNetwork={network:'unknown'};updateWalletDisplay();updateEncryptButtonState();if(networkStatusInterval)clearInterval(networkStatusInterval);networkStatusInterval=null;};
const handleAccountsChanged=async(accs,name="Wallet")=>{if(!accs||accs.length===0){handleDisconnect(name);return;}userAddress=accs[0].address||accs[0];let balStr='Loading...';if(currentWallet&&typeof currentWallet.getBalance==='function'){try{balStr=formatBalance(await currentWallet.getBalance(),name);}catch(e){balStr='N/A';}}else if(userAddress&¤tWallet&¤tWallet._satsConnect){balStr=await fetchSignetBalance(userAddress);}if(currentWallet&&typeof currentWallet.getNetwork==='function'){try{const netInfo=await currentWallet.getNetwork();currentNetwork=(netInfo&&typeof netInfo.network==='string')?{network:netInfo.network.toLowerCase()}:{network:CONTRACT_CONFIG.network};}catch(e){currentNetwork={network:CONTRACT_CONFIG.network};}}updateWalletDisplay(currentWallet?._brand?.name||name,userAddress,currentNetwork.network,balStr);walletConnected=true;updateEncryptButtonState();};
const handleNetworkChanged=async(netInfo,name="Wallet")=>{if(typeof netInfo==='string')currentNetwork={network:netInfo.toLowerCase()};else if(netInfo&&typeof netInfo.network==='string')currentNetwork={network:netInfo.network.toLowerCase()};else if(currentWallet&&typeof currentWallet.getNetwork==='function'){try{const ni=await currentWallet.getNetwork();currentNetwork=(ni&&typeof ni.network==='string')?{network:ni.network.toLowerCase()}:{network:CONTRACT_CONFIG.network};}catch(e){currentNetwork={network:CONTRACT_CONFIG.network};}}else{currentNetwork={network:CONTRACT_CONFIG.network};}const balStr=document.getElementById('walletBalance')?.textContent.replace('Balance: ','')||'Loading...';updateWalletDisplay(currentWallet?._brand?.name||name,userAddress,currentNetwork.network,balStr);if(currentNetwork.network!==CONTRACT_CONFIG.network)await promptNetworkSwitch(currentWallet?._brand?.name||name);updateEncryptButtonState();};
function formatBalance(balData,name){if(balData==null)return'N/A';let sats;if(typeof balData==='number')sats=balData;else if(balData&&typeof balData.total==='number')sats=balData.total;else if(balData&&typeof balData.satoshi==='number')sats=balData.satoshi;else if(balData&&typeof balData.confirmed==='number')sats=balData.confirmed;else return'N/A (Format)';return`${(sats/100000000).toFixed(4)} tBTC`;}
async function checkInitialConnection(){try{if(typeof window.unisat?.getAccounts==='function'){const accs=await window.unisat.getAccounts();if(accs&&accs.length>0){userAddress=accs[0];currentWallet=window.unisat;currentWallet._brand={name:"Unisat"};currentNetwork=await window.unisat.getNetwork();if(!currentNetwork||typeof currentNetwork.network!=='string')currentNetwork={network:CONTRACT_CONFIG.network};else currentNetwork.network=currentNetwork.network.toLowerCase();handleInitialWalletConnection('Unisat',currentNetwork,formatBalance(await currentWallet.getBalance(),"Unisat"));return;}}if(typeof window.okxwallet?.bitcoin?.selectedAccount==='object'&&window.okxwallet.bitcoin.selectedAccount?.address){const acc=window.okxwallet.bitcoin.selectedAccount;userAddress=acc.address;userPublicKey=acc.publicKey;currentWallet=window.okxwallet.bitcoin;currentWallet._brand={name:"OKX"};currentNetwork=await window.okxwallet.bitcoin.getNetwork();if(!currentNetwork||typeof currentNetwork.network!=='string')currentNetwork={network:CONTRACT_CONFIG.network};else currentNetwork.network=currentNetwork.network.toLowerCase();handleInitialWalletConnection('OKX',currentNetwork,formatBalance(await currentWallet.getBalance(),"OKX"));return;}}catch(error){console.warn("Initial wallet check error:",error.message);}}
function handleInitialWalletConnection(type,netInfo,balStr){walletConnected=true;currentNetwork=netInfo;if(!currentNetwork||typeof currentNetwork.network!=='string')currentNetwork={network:CONTRACT_CONFIG.network};else currentNetwork.network=currentNetwork.network.toLowerCase();updateWalletDisplay(type,userAddress,currentNetwork.network,balStr);if(currentNetwork.network!==CONTRACT_CONFIG.network)promptNetworkSwitch(type);updateEncryptButtonState();startNetworkStatusMonitoring();}
async function checkWalletsAvailability(){let found=0;const upd=(key,avail)=>{const opt=document.querySelector(`.wallet-option[data-wallet="${key}"]`);if(opt){opt.classList.toggle('unavailable',!avail);if(avail)found++;opt.style.display='flex';}};await new Promise(r=>setTimeout(r,150));upd('unisat',typeof window.unisat?.requestAccounts==='function');const sc=window.satsConnect||window.satsconnect;upd('xverse',typeof window.BitcoinProvider==='object'||(typeof sc?.request==='function'));upd('okx',typeof window.okxwallet?.bitcoin?.connect==='function');upd('leather',typeof window.LeatherProvider==='function'||typeof window.Leather==='object'||(typeof sc?.request==='function'));document.getElementById('walletSelectInstruction').style.display='block';document.getElementById('walletAvailabilityMessage').style.display=found===0?'block':'none';}
async function connectToWallet(type){let accs=[],name=type.charAt(0).toUpperCase()+type.slice(1),balStr='Loading...';currentNetwork={network:'unknown'};console.log(`Attempting to connect to ${name}`);if(type==='unisat'&&typeof window.unisat!=='undefined'){accs=await window.unisat.requestAccounts();currentNetwork=await window.unisat.getNetwork();currentWallet=window.unisat;currentWallet._brand={name:"Unisat"};balStr=formatBalance(await currentWallet.getBalance(),"Unisat");}else if(type==='okx'&&typeof window.okxwallet?.bitcoin!=='undefined'){const res=await window.okxwallet.bitcoin.connect();accs=res.address?[res.address]:(Array.isArray(res)?res:[]);userPublicKey=res.publicKey;currentNetwork=await window.okxwallet.bitcoin.getNetwork();currentWallet=window.okxwallet.bitcoin;currentWallet._brand={name:"OKX"};balStr=formatBalance(await currentWallet.getBalance(),"OKX");}else if(type==='xverse'||type==='leather'){const sc=window.satsConnect||window.satsconnect;if(!sc||typeof sc.request!=='function')throw new Error(`${name} (SatsConnect) API not found or not initialized. Ensure the extension is active and page refreshed.`);name=type.charAt(0).toUpperCase()+type.slice(1);console.log(`Using SatsConnect for ${name}`);const getAccountsOptions={purposes:['payment','ordinals'],network:{type:CONTRACT_CONFIG.network==='signet'?'Signet':'Mainnet'}};console.log(`SatsConnect: Requesting accounts with options:`,getAccountsOptions);const addrRes=await sc.getAccounts(getAccountsOptions);console.log(`SatsConnect: getAccounts response for ${name}:`,addrRes);if(addrRes.status==='success'&&addrRes.result.length>0){const pAcc=addrRes.result.find(a=>a.purpose==='payment');if(!pAcc)throw new Error(`${name} no payment address from SatsConnect.`);accs=[pAcc.address];userPublicKey=pAcc.publicKey;currentNetwork={network:(pAcc.network?.type||CONTRACT_CONFIG.network).toLowerCase()};balStr=await fetchSignetBalance(pAcc.address);currentWallet={_brand:{name},_satsConnect:sc,_paymentAddress:pAcc.address,requestAccounts:async()=>accs,getNetwork:async()=>currentNetwork,getBalance:async()=>fetchSignetBalance(pAcc.address),signPsbt:async(psbtB64)=>{console.log(`SatsConnect: Signing PSBT for ${name}`);const sr=await sc.signPsbt({psbtBase64,network:currentNetwork.network.toUpperCase(),signInputs:{0:{address:pAcc.address,sighashTypes:[1]}}});if(sr.status==='success')return sr.result.psbtBase64;throw new Error(sr.error?.message||'SatsConnect signPsbt fail.');},disconnect:async()=>{if(typeof sc.disconnect==='function')await sc.disconnect();}};}else{throw new Error(addrRes.error?.message||`${name} SatsConnect connection failed.`);}}else{throw new Error(`${name} provider detection/connection failed.`);}if(!accs||accs.length===0)throw new Error("No accounts or permission denied.");userAddress=accs[0].address||accs[0];if(!currentNetwork||typeof currentNetwork.network!=='string')currentNetwork={network:CONTRACT_CONFIG.network.toLowerCase()};else currentNetwork.network=currentNetwork.network.toLowerCase();walletConnected=true;updateWalletDisplay(currentWallet._brand?.name||name,userAddress,currentNetwork.network,balStr);if(currentNetwork.network!==CONTRACT_CONFIG.network){if(await promptNetworkSwitch(currentWallet._brand?.name||name)&¤tWallet&&typeof currentWallet.getNetwork==='function'){const nNet=await currentWallet.getNetwork();currentNetwork=(!nNet||typeof nNet.network!=='string')?{network:CONTRACT_CONFIG.network}:{network:nNet.network.toLowerCase()};updateWalletDisplay(currentWallet._brand?.name||name,userAddress,currentNetwork.network,balStr);}}updateEncryptButtonState();startNetworkStatusMonitoring();if(window.unisat&¤tWallet===window.unisat){window.unisat.removeAllListeners('accountsChanged');window.unisat.removeAllListeners('networkChanged');window.unisat.on('accountsChanged',(a)=>handleAccountsChanged(a,"Unisat"));window.unisat.on('networkChanged',(n)=>handleNetworkChanged(n,"Unisat"));}if(window.okxwallet?.bitcoin&¤tWallet===window.okxwallet.bitcoin){window.okxwallet.bitcoin.removeAllListeners('accountsChanged');window.okxwallet.bitcoin.removeAllListeners('networkChanged');window.okxwallet.bitcoin.on('accountsChanged',(r)=>{const a=Array.isArray(r)?r:(r&&r.address?[r.address]:[]);handleAccountsChanged(a,"OKX")});window.okxwallet.bitcoin.on('networkChanged',(n)=>handleNetworkChanged(n,"OKX"));}}
async function promptNetworkSwitch(name){if(currentNetwork.network.toLowerCase()===CONTRACT_CONFIG.network)return true;if(currentWallet&¤tWallet.switchNetwork&&typeof currentWallet.switchNetwork==='function'){try{let targetNetForSwitch=CONTRACT_CONFIG.network;if((name==="Unisat"||name==="OKX")&&CONTRACT_CONFIG.network==="signet")targetNetForSwitch="testnet";await currentWallet.switchNetwork(targetNetForSwitch);const nNet=await currentWallet.getNetwork();currentNetwork=(!nNet||typeof nNet.network!=='string')?{network:CONTRACT_CONFIG.network}:{network:nNet.network.toLowerCase()};if(currentNetwork.network===CONTRACT_CONFIG.network||((name==="Unisat"||name==="OKX")&¤tNetwork.network==="testnet"&&CONTRACT_CONFIG.network==="signet")){currentNetwork.network=CONTRACT_CONFIG.network;updateWalletDisplay(name,userAddress,currentNetwork.network,document.getElementById('walletBalance')?.textContent.replace('Balance: ',''));updateEncryptButtonState();return true;}}catch(err){console.warn(`API switchNetwork for ${name} fail:`,err.message);}}return new Promise(res=>{showModal("Incorrect Network",`<p>Your ${name} is on <strong>${currentNetwork.network.toUpperCase()}</strong>.</p><p>Please switch to <strong>${CONTRACT_CONFIG.network.toUpperCase()}</strong> to proceed.</p><p>Click "OK" after switching in your wallet.</p>`,false);const okBtn=document.querySelector('#modalOverlay .modal-footer .btn-primary');if(okBtn)okBtn.onclick=async()=>{hideModal();if(currentWallet&&typeof currentWallet.getNetwork==='function'){try{const nNet=await currentWallet.getNetwork();currentNetwork=(!nNet||typeof nNet.network!=='string')?{network:CONTRACT_CONFIG.network}:{network:nNet.network.toLowerCase()};}catch(e){console.warn("Re-check net err:",e);}}if((name==="Unisat"||name==="OKX")&¤tNetwork.network==="testnet"&&CONTRACT_CONFIG.network==="signet")currentNetwork.network=CONTRACT_CONFIG.network;updateWalletDisplay(name,userAddress,currentNetwork.network,document.getElementById('walletBalance')?.textContent.replace('Balance: ',''));updateEncryptButtonState();res(currentNetwork.network===CONTRACT_CONFIG.network);};else res(false);});}
function startNetworkStatusMonitoring(){if(networkStatusInterval)clearInterval(networkStatusInterval);networkStatusInterval=setInterval(async()=>{if(!walletConnected||!currentWallet||typeof currentWallet.getNetwork!=='function'){clearInterval(networkStatusInterval);networkStatusInterval=null;return;}try{const netInfo=await currentWallet.getNetwork();const newNet=(netInfo&&typeof netInfo.network==='string')?netInfo.network.toLowerCase():CONTRACT_CONFIG.network;if(newNet!==currentNetwork.network){currentNetwork.network=newNet;const balStr=document.getElementById('walletBalance')?.textContent.replace('Balance: ','')||'Loading...';updateWalletDisplay(currentWallet._brand?.name||"Wallet",userAddress,currentNetwork.network,balStr);updateEncryptButtonState();if(currentNetwork.network!==CONTRACT_CONFIG.network)console.warn(`Monitor: Wallet on ${currentNetwork.network.toUpperCase()}, ${CONTRACT_CONFIG.network.toUpperCase()} req.`);}}catch(err){console.error("Net monitor err:",err);}},7500);}
function initCarousel(){const cont=document.getElementById('twitterCarousel'),prev=document.getElementById('prevSlide'),next=document.getElementById('nextSlide'),indsCont=document.getElementById('carouselIndicators');if(!cont||!prev||!next||!indsCont)return;cont.innerHTML='';TWEET_TEMPLATES.forEach(tweet=>{const slide=document.createElement('div');slide.className='carousel-slide';slide.innerHTML=`<div class="carousel-slide-content"><img src="${tweet.img}" alt="Tweet preview" class="carousel-slide-image"><p class="carousel-slide-text">${tweet.text.replace('{UNLOCK_BLOCK}',CONTRACT_CONFIG.unlockBlockHeight).replace(APP_URL,`<a href='${APP_URL}' target='_blank' class='tweet-link'>${APP_URL}</a>`)}</p><div class="carousel-slide-actions"><button class="copy-tweet-btn" data-tweet="${tweet.text.replace('{UNLOCK_BLOCK}',CONTRACT_CONFIG.unlockBlockHeight)} ${APP_URL}">Tweet This</button></div></div>`;cont.appendChild(slide);});const slides=cont.querySelectorAll('.carousel-slide'),total=slides.length;if(total===0)return;let curr=0;indsCont.innerHTML='';slides.forEach((s,i)=>{s.classList.remove('active');const ind=document.createElement('div');ind.className='carousel-indicator';ind.dataset.slide=i;indsCont.appendChild(ind);});const inds=indsCont.querySelectorAll('.carousel-indicator');function go(idx){curr=(idx+total)%total;slides.forEach((s,i)=>s.classList.toggle('active',i===curr));inds.forEach((ind,i)=>ind.classList.toggle('active',i===curr));}function auto(){go(curr+1);}if(total>1){prev.style.display='flex';next.style.display='flex';indsCont.style.display='flex';prev.onclick=()=>{go(curr-1);resetAuto();};next.onclick=()=>{go(curr+1);resetAuto();};inds.forEach((ind,i)=>ind.onclick=()=>{go(i);resetAuto();});if(carouselAutoSlideInterval)clearInterval(carouselAutoSlideInterval);carouselAutoSlideInterval=setInterval(auto,6000);}else{prev.style.display='none';next.style.display='none';indsCont.style.display='none';}function resetAuto(){if(total>1){clearInterval(carouselAutoSlideInterval);carouselAutoSlideInterval=setInterval(auto,6000);}}go(0);document.querySelectorAll('.copy-tweet-btn').forEach(b=>b.onclick=()=>window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(b.dataset.tweet)}`,'_blank'));}
function initMessageInput(){const msgIn=document.getElementById('message'),charEl=document.getElementById('charCount'),byteEl=document.getElementById('byteCount'),resDiv=document.getElementById('encryptionResult'),btn=document.getElementById('encryptMessageBtn');if(!msgIn||!charEl||!byteEl||!resDiv||!btn)return;resDiv.style.display='none';msgIn.oninput=()=>{const txt=msgIn.value,chars=txt.length,bytes=new TextEncoder().encode(txt).length;charEl.textContent=chars;byteEl.textContent=bytes;charEl.style.color=chars>150?'var(--color-error)':'';byteEl.style.color=bytes>80?'var(--color-error)':'';updateEncryptButtonState();resDiv.style.display='none';document.getElementById('signTransaction').style.display='none';};btn.onclick=encryptMessage;updateEncryptButtonState();}
function updateEncryptButtonState(){const btn=document.getElementById('encryptMessageBtn'),msgIn=document.getElementById('message');if(!btn||!msgIn)return;const txt=msgIn.value,trimTxt=txt.trim(),chars=txt.length,bytes=new TextEncoder().encode(txt).length;if(!walletConnected){btn.disabled=true;btn.textContent="Connect Wallet to Proceed";btn.classList.add('btn-visually-disabled');return;}if(currentNetwork.network.toLowerCase()!==CONTRACT_CONFIG.network){btn.disabled=true;btn.textContent=`Set Wallet to ${CONTRACT_CONFIG.network.toUpperCase()}`;btn.classList.add('btn-visually-disabled');return;}btn.classList.remove('btn-visually-disabled');if(trimTxt===''){btn.disabled=true;btn.textContent="Enter Message to Proceed";}else if(chars>150){btn.disabled=true;btn.textContent="Message Too Long (150 Chars Max)";}else if(bytes>80){btn.disabled=true;btn.textContent="Message Too Large (80 Bytes Max)";}else{btn.disabled=false;btn.textContent="Encode & Generate Transaction";}}
function initBlockHeightAndCountdown(){const currEl=document.getElementById('currentBlockHeight'),unlkEl=document.getElementById('unlockBlockHeight'),bar=document.getElementById('progressBar'),statDiv=document.getElementById('blockStatus');if(!currEl||!unlkEl||!bar||!statDiv)return;const unlkBlk=parseInt(unlkEl.textContent,10);let currSim=0;async function fetchHght(){try{if(currEl.textContent==='Loading...'||isNaN(parseInt(currEl.textContent)))currSim=Math.floor(unlkBlk*0.995);else{currSim=parseInt(currEl.textContent,10);if(currSim<unlkBlk){currSim+=1;currSim=Math.min(currSim,unlkBlk);}}currEl.textContent=currSim;updUI(currSim,unlkBlk);}catch(err){currEl.textContent='Err';statDiv.innerHTML='<p class="status-text error-text">Block err.</p>';statDiv.className='status-indicator error';if(countdownInterval)clearInterval(countdownInterval);}}function updUI(curr,trgt){const rem=Math.max(0,trgt-curr),perc=Math.min(100,(curr/trgt)*100);bar.style.width=`${perc}%`;const remEl=document.getElementById('blocksRemaining');if(remEl)remEl.textContent=rem;if(rem<=0){statDiv.className='status-indicator unlocked';const stTxt=statDiv.querySelector('.status-text');if(stTxt)stTxt.textContent='🎉 Capsules Now Unlockable!';const grid=statDiv.querySelector('.countdown-grid');if(grid)grid.style.display='none';if(countdownInterval)clearInterval(countdownInterval);countdownInterval=null;}else{statDiv.className='status-indicator pending';const stTxt=statDiv.querySelector('.status-text');if(stTxt)stTxt.innerHTML=`Unlocks in ~<span id="blocksRemaining">${rem}</span> blocks`;const grid=statDiv.querySelector('.countdown-grid');if(grid)grid.style.display='grid';const secsRem=rem*600,now=Date.now(),unlkTS=now+(secsRem*1000);if(countdownInterval)clearInterval(countdownInterval);countdownInterval=setInterval(()=>{let diff=unlkTS-Date.now();if(diff<=0){diff=0;fetchHght();}const d=Math.floor(diff/(1000*60*60*24)),h=Math.floor((diff%(1000*60*60*24))/(1000*60*60)),m=Math.floor((diff%(1000*60*60))/(1000*60)),s=Math.floor((diff%(1000*60))/1000);document.getElementById('countdownDays').textContent=d;document.getElementById('countdownHours').textContent=h.toString().padStart(2,'0');document.getElementById('countdownMinutes').textContent=m.toString().padStart(2,'0');document.getElementById('countdownSeconds').textContent=s.toString().padStart(2,'0');},1000);}}fetchHght();setInterval(fetchHght,15000);}
function initTabs(){const btns=document.querySelectorAll('.tabs .tab-btn'),cnts=document.querySelectorAll('.tab-content');if(!btns.length||!cnts.length)return;btns.forEach(b=>b.onclick=()=>{const id=b.dataset.tab;btns.forEach(x=>x.classList.remove('active'));cnts.forEach(x=>x.classList.remove('active'));b.classList.add('active');const c=document.getElementById(id);if(c)c.classList.add('active');});if(btns.length>0&&!document.querySelector('.tabs .tab-btn.active'))btns[0].click();else if(document.querySelector('.tabs .tab-btn.active')){const actT=document.querySelector('.tabs .tab-btn.active'),actCId=actT.dataset.tab,actC=document.getElementById(actCId);if(actC)actC.classList.add('active');}}
function initDonationAddressCopy(){const div=document.getElementById('donationAddress');if(!div)return;const txtEl=document.getElementById('donationAddressText'),confEl=div.querySelector('.copy-confirmation');if(!txtEl||!confEl)return;div.onclick=async()=>{try{await navigator.clipboard.writeText(txtEl.textContent);confEl.classList.add('show');setTimeout(()=>confEl.classList.remove('show'),2000);}catch(err){showModal("Copy Error","<p>Could not copy.</p>");}};}
async function encryptMessage(){if(!walletConnected||!currentWallet){showModal("Wallet Error","<p>Connect wallet.</p>");await checkInitialConnection();if(!walletConnected)return;}updateEncryptButtonState();if(document.getElementById('encryptMessageBtn').disabled)return;const msgIn=document.getElementById('message'),encOut=document.getElementById('encodedMessageOutput'),outDiv=document.getElementById('output'),signBtn=document.getElementById('signTransaction'),resDiv=document.getElementById('encryptionResult');const msg=msgIn.value;if(msg.trim()===''){showModal("Input Error","<p>Enter a message.</p>");return;}const encMsg=btoa(unescape(encodeURIComponent(msg)));encOut.textContent=encMsg;const dummyPsbtB64="cHNidP8BAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX5/gIGCg4SFhoeIiYqLjI2Oj5CRkpOUlZaXmJmam5ydnp+goaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT1NWW19jZ2tvc3d7f4OHi4+Tl5ufo6err7O3u7/Dx8vP09fb3+Pn6+/z9/v8=";outDiv.innerHTML=`<div class="transaction-detail"><label>Action:</label><span>Store Message</span></div><div class="transaction-detail"><label>Fee:</label><span>${CONTRACT_CONFIG.feeAmount} tBTC</span></div><div class="transaction-detail"><label>Encoded Message:</label><span class="code-block small">${encMsg}</span></div><p class="alert alert-info mt-sm">Transaction preview. Real PSBT construction is complex and omitted for this demonstration.</p>`;resDiv.style.display='block';signBtn.style.display='block';signBtn.onclick=()=>signAndSubmitTransaction(dummyPsbtB64,encMsg);}
async function signAndSubmitTransaction(psbtBase64,originalMessageBase64){if(!walletConnected||!currentWallet){showModal("Wallet Error","<p>Wallet not connected.</p>");await checkInitialConnection();if(!walletConnected)return;}if(!currentWallet.signPsbt){showModal("Unsupported Wallet",`<p>${currentWallet._brand?.name||"Wallet"} does not support the required PSBT signing functionality.</p>`);return;}showModal("Signing Transaction","<p>Please approve the transaction in your wallet...</p>");try{const signedPsbtB64=await currentWallet.signPsbt(psbtBase64,{autoFinalized:true,signAtIndex:0});hideModal();const simTxId="sim_tx_"+Date.now().toString(36);showModal("Capsule Submitted (Simulated)",`<p>Your time capsule transaction has been processed (simulation complete)!</p><p>TxID (Simulated): <a href="https://mempool.space/signet/tx/${simTxId}" target="_blank">${simTxId}</a></p><p>Note: This is a simulated broadcast using a placeholder PSBT. A live implementation would broadcast to the Bitcoin network.</p>`);document.getElementById('message').value='';updateEncryptButtonState();document.getElementById('encryptionResult').style.display='none';document.getElementById('signTransaction').style.display='none';}catch(error){hideModal();showModal("Transaction Failed",`<p>An error occurred during signing or submission: ${error.message||'Unknown error (refer to console for details)'}</p><p>This could be due to wallet rejection, network issues, or demo limitations with the placeholder PSBT.</p>`);}}
function loadStoredMessages(){document.getElementById('storedMessagesList').innerHTML='<p>No capsules currently stored (Demonstration Feature).</p>';}
function retrieveMessage(txId,encMsg){try{const dec=decodeURIComponent(escape(atob(encMsg)));showModal("Retrieved Message",`<p><strong>Message Content:</strong></p><p style="word-break:break-word;">${dec.replace(/</g,"<").replace(/>/g,">")}</p>`);}catch(e){showModal("Decoding Error","<p>Message decoding failed. The data may be corrupted.</p>");}}
function checkMessage(){const txIn=document.getElementById('txIdInput'),statDv=document.getElementById('messageStatus'),txId=txIn.value.trim();if(!txId){statDv.innerHTML='<p class="alert alert-warning">Please provide a Transaction ID for lookup.</p>';return;}statDv.innerHTML=`<p>Querying status for TxID: ${txId} (Demonstration)...</p>`;setTimeout(()=>{const unl=Math.random()>0.5,dEnc='SGVsbG8gdGhlcmUh';statDv.innerHTML=`<div class="message-item alert ${unl?'alert-success':'alert-info'}"><p><strong>TxID:</strong> ${txId}</p><p><strong>Status:</strong> ${unl?'Unlocked':'Pending'} (Demonstration)</p>${unl?`<p class="code-block small">${dEnc}</p><button class="btn btn-primary btn-sm mt-sm" onclick="decodeAndDisplayMessage('${dEnc}')">Decode Message</button>`:''}</div>`;},500);}
function decodeAndDisplayMessage(encMsg){try{const dec=decodeURIComponent(escape(atob(encMsg)));showModal("Retrieved Message",`<p><strong>Message Content:</strong></p><p style="word-break:break-word;">${dec.replace(/</g,"<").replace(/>/g,">")}</p>`);}catch(e){showModal("Decoding Error","<p>Message decoding failed.</p>");}}
function updateVisitorCounter(){const el=document.getElementById('visitorCount');if(el){let c=parseInt(localStorage.getItem('visitor_tc_v7')||'0');c++;el.textContent=c.toLocaleString();localStorage.setItem('visitor_tc_v7',c.toString());}}
document.addEventListener('DOMContentLoaded',async function(){initCarousel();initMessageInput();initBlockHeightAndCountdown();initTabs();initDonationAddressCopy();updateVisitorCounter();try{await initWalletConnection();}catch(e){console.error("Main wallet init error:",e);}loadStoredMessages();});